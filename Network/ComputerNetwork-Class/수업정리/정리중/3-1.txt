Transport Layer



가장 대표적인 것이 99.9% --> TCP 사용중
reliable...sender쪽에서 상대방이 받았는지 확인.
TCP connection 필요
congestion control

--> UDP...
unreliable...
No connection, congestion...




--------------------
UDP: User Datagram Protocol
Unreliable, unordered delivery...
	상대방이 받았는지 안받았는지 확인하지 않으며, 못받아도 다시 보내지 않음..
Port number 사용..
	multiplexiong 사용중...
error checking
	상대방이 받은 data checksum이라는 기능으로 에러의 유무를 확인... 확인만 함..
connetionless
	no handshaking....--> sender가 여러개의 패킷을 보낼 때 그 패킷들은 모두 독립적이다.
	// TCP는 TCP connection을 함..

UDP usage
	multimedia app, DNS
reliable transfer over UDP
---UDP 자체에는 unreliable하지만, 상위 애플리케이션에서 reliable하게 지원함.


UDB header
	source port#, dest port,length, checksum

장점:
	connectionless이므로 빠르다.
	간단하다.(//TCP connection 후에... 두 호스트가 정보를 
	가벼다.. --> overhead가 업다..
	--> connecion sate

UDP for DNS
... UDP가 DNS에 requst 보내고 받지않음..unrelialbe하기 때문에
하지만 DNS는
UDP는 unreliabl하지만 app에서 reliable하게 한다. 그래서 패킷에 문제가 있으면 앱에서 UDP로 다시요청한다...


UDP for Quic

크롬은 UDP위에 Quic이라는 것을 사용...quic는 app에 구현...--> reliability 구현


CheckSum:
보낸 파일과 받은 파일의 무결성 검사..
받은 데이터가 에러가 있는지 없는지....
UDP segment checksum부분에 값을 넣고..  16비트 정수형이라고 생각해서 다 더해서 같으면 ㅇㅋ.'
체크섬에 문제가 없으면 applicaion layer에 올리고, 문제가 있으면 그냥 버림...
오륭를 확인 할 수 있는 가장 간단한 방법..










/ Deulitplexion
network까지는 똑같은 destination ip address를 보고 전달했지만...
transport부터는 포트넘버를 보고 맞는 소켓으로 보내는 것이 demultiplexiing이다.
---destination port number를 보고 확인.

Demultiplexing...
UDP는....DatagramSocket으로 연결...
그럼 다른 host가 segement를 보고 (ipaddress를 보고 나에게로 온건지 알고 networklayer까지..), portnumber를 보고 어떤 소켓(프로세스)으로 보내는지 확인..
--> 출발지가 다른 여러 패킷의 목적지 포트가 같으면 같은 소켓으로 보낸다. --> 목적지포트넘버를 확인하기 때문에
///TCP는 다른 출발지면 다른 소켓으로 보냄...
하지만 DatagramSocket연결할 때...source port와 dest port를 넣어줌.. --> reply를 보낼 땐 source port를 사용..


TCP는 sourcce IP address, portnumber, dest IPaddress,portNumber를 확인함..
TCP는 connection을 맺기때문에 connection을 구분하기 위해 위처럼(4 tuple) 확인하지만... 하지만 UDP는 connection을 맺지않는다..
p.25... TCP는 4tuple을 확인하기 때문에 목적지 아이피 포트가 같아도 다른 소켓으로 보낸다..(미리 맺은 connection이 다르기 때문에.
다른 소켓..다른 프로세스로 보낸다.).....p2 p3를 보면 같은 호스트에서 같은 목적지에서 보내지만 받는쪽에서는 다른 소켓에서 받는다.


multiplexing
여러포트로 여러 앱들을 구분한는 곳은 transport layer이고, 그 여러 앱에서 보내는 데이터가 network layer에서는 포트넘버를 안보고
아이피주소를 보고 보내기 때문에(포트는 다르지만 다 같은 출발지 주소에서 보냄) 하나로 묶어서 보낸다.
==> transport layer에서 multiplexing이나 demultiplexing을 함..




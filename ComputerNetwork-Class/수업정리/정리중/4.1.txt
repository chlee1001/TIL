Network Layer

datagram - network layer packet  ---network layer에 온 packet을 datagram라고 부름.
newtork layer가 가지고 있는 router-길을 찾아가는 것

network layer에서 중요한 두가지
routing- 여러가지 기준에 따른 최적의 경로를 찾아가는 것이 라우팅..
-end system에서 end system까지 최적의 경로를 찾아가는 것이 라우팅
라우팅 알고리즘
forwarding - 길을 찾아가는 중간중간에 어느방향으로 가야하는지 정하는 것이 포워딩.
- 중간중간 라우터들마다, 들어온 패킷들을 어느 방향으로 보내야하는지 정하는 것이 포워딩..
포워딩 테이블 - 라우팅 알고리즘에 의해 결정됨.

--> 라우팅으로 최적의 경로를 찾고, 그 경로를 포워딩으로 찾아감


Fowarding Function - Data plane
패킷이 오면 패킷의 헤더를 보고 fowarding을 보고 적절한 곳으로 내보냄

Routing Function - Control plane
forwaring function을 구성하기 위해 routing function을 함.
- traditional routing algorithms - per router control plane - 각 라우터마다 control plane과 data plane이 존재. data plane- forwarding function으로 패킷을 내보내는데 그 기준을 정하기 위해 control plane의 routing algorithm으로  정한다. 그 기준을 정하기 위해 정보가 필요한데 , 그래서 각 라우터들끼리 정보를 공유.. ==> 분산 알고리즘
-software defined networking(SDN) - Logically centralized control plane - control plane의 역할을 하는 remote controller라는 서버에서 각 라우터들의 정보를 모아서, 모은 정보로 최적의 경로의 알고리즘라우팅 알고리즘을 돌려서 포워딩 테이블을 만들어 다시 각 라우터들에게 정보를 알려줌.



IP: Internet Protocol
IP header 
IP ver - IP protocol version, head.len - 32bit(4bytes) * 5 = 20bytes + a, length = datagram의 전체 길이
IP 헤더에는 출발지와 IP주소, 목적지의 IP주소가 들어감.
IP data에는 TCP의 헤더가 들어감.

IP fragmentation, reassembly
링크종류마다 최대 보낼수있는 패킷의 크기가 정해짐 - MTU (max.transfer unit(size))
--만약 처음 링크 MTU가 4000B고 다음 링크의 MTU는 1500B이면 그 패킷은 갈 수 없다. 그래서 MTU의 한도때문에 패킷을 쪼개야한다.(fragmentation)
그 쪼개진 패킷을 받고 나서 다시 reassembly로 합쳐짐.. ==> 쪼개는 이유는 만약 쪼개진상태로 들어오면 TCP는 쪼개진 것중에 한 곳에만 들어있어서 받는 쪽이 그 패킷을 보고 ack을 보낼 수 없고 정확한 정보를 읽을 수 없다.
만약 fragmentation한 패킷이 일부 loss가 발생하면 그 받는쪽은 패킷이 아에 안왔다고 생각해서 그냥 ack을 안보냄  그럼 보내는 쪽에서 패킷 전체를 다시 보냄..




IP addressing introduction
interface: 네트워크와 연결 된 지점..(랜포트..  ===> 사실 호스트마다 IP address가 있는 것이 아니라 각각의 interface마다 IP address를 부여..
라우터는 기본적으로 여러개의 interface를 가진다.   --> 그래서 여러 ip address를 가지고 있다.
유선은 스위치로 연결, 무선은 WIFI AP로 연결   

IP address는 32비트로 2^32로 약 42억개의 아이피 주소가있다. 각 interface는 유일한 아이피 주소를 가진다.
아이피 주소는 subnet id와 host id를 가짐..

Subnets -  동일한 서브넷 아이디를 가진 애들끼리 모임...- 같은 네트워크를 쓰는 애들이다.== 같은 서브넷을 쓰는 애들
- 같은 서브넷내에서는 라우터 없이 연결할 수 있다.

SubnetMask - ip의 왼쪽 24bit가 subnet mask... /24로 표현...-- 그 24비트가 같으면 같은subnet에 속한 것..  //////// 나머지 오른쪽 8bit는 호스트 id
==> 11111111 11111111 11111111 00000000  or 255.255.255.0
ex 255.255.254.0이면 23bit가 subnetmask

--여기까지 이런 방식을 CIDR라고 한다. Classless InterDomain Routing
a.b.c.d/x --->  x가 subnet mask의 bit
subnet id 랑 prefix 같음


라우터는 ip주소의 prefix를 보고 방향을 결정...  (포워딩 테이블에는 42억개의 ip주소를 저장해놔야하는데 그럼 너무 많아서 prefix로 묶어놓는다.. 그래서 포워딩 테이블는 prrefix가 들어가있따.) --> 검색이 빨라짐...
prefix가 아닌 부분은 host id


소규모 네트워크는 host id가 적기 때문에 prefix를 길게한다.
대규모 네트워크는 host id가 많이 때문에 prefix를 짧게하낟.
만약 10개 주소가 필요하면...2^4이 필요함으로 32-4로 28bit를 prefix
만약 500개 주소는 2^9이 필요함...32-9는 23bit를 prefix


------------------------------

DHCP

IP를 자동으로 할당해주는 것..DHCP.. DHCP로 설정된 아이피주소및 서브넷마크크 등등 설정은 임대방식으로 부여된다. 임대기간이 끝나면 아이피주소는 반환되며 사용자는 다시 DHCP로 임대받는다.

새로 들어온 호스트는 ip주소도 없고, DHCP server를 모른다. 두문제가 있다.
그래서... 호스트가 들어오면 먼저 DHCP를 찾아야한다. 그 후 DHCP를 통해 IP주소를 받아와야한다.
--우선 클라이언트는 이 서버에 DHCP server가 있는지 DHCP discover를 보냄(불특정 다수에게 전달 Broadcast)-누가 DHCP server인지 모르니깐 주변에 다 보내본다.. 목적지는 255.255.255.255라는 Broadcast IP address로 보낸다. 보내는 사람은 0.0.0.0으로 보낸다. Tranjaction ID를 적어서 보낸다.이 때 DHCP server가 이 메시지를 받아서 응답을 한다.
DHCP offer(응답)을 Broadcasst로 보내준다. 다른 클라이언트는 자신이 discover을 안보냈기때문에 무시, discover을 보냈던 client가 그 응답을 받는다. 그 응답에 Tranjaction ID가 있어서 client가 자신이 보낸 discover에 대한 응답인지 알 수 있다.
그후 클라이언트는 DHCP request를 Broadcast로 요청한다.(이 때는 DHCP가 여러개일수도 있기 때문에 자신은 어떤 DHCP를 선택했다고 다른 DHCP서버들에게 알리기 위해서 broadcast한다.)
최종적으로 DHCP 서버는 DHCP ACK broadcast로 보낸다.(클라이언트의 주소가 아직 안정해졌기 때문에)..그 ACK에는 yiar(your ip address)가 있기 때문에 클라이언트는 그것을 받고 설정

DHCP에는 아이피 주소뿐만아니라 local DNS server정보, firsthop router주소 등등을 알 수 있다.
DHCP를 사용함으로써 관리자도 그 한정된 아이피 갯수를 효율적으로 사용할 수 있게할수있다.


----------------------

NAT
외부...external IP주소..공용아이피주소
internal ip주소.. 내부 아이피주소로 외부로 나가면 사용불가.. 내부네트워크에서만 사용가능
그래서 NAT은 internal address를 external address로 변환해준다.
호스트가 특정 목적지에 datagram을 전송할 때 자신의 아이피와 포트번호를 적어준다.
NAT은 그 아이피주소와 포트번호를 공용아이피로 변환시키고 포트번호는 다른 호스트와 겹치기 때문에 구분할 수 있도록 변환하여 목적지에 보낸다.  (그 목적지는 NAT이 보냈다고 착각한다. 그래서 목적지는 그 NAT장비한테 응답을 보낸다.)
NAT장비는 그 응답이 향하는 아이피주소를 보고 자신의 NAT translagtion table표를 보고 그 아이피에 해당하는 내부 아이피 주소 목적지로 보낸다.


NAT의 포트번호는 호스트와 어플리케이션....connection 하나하나 구분한다.


NAT는
나가는 datagram에서 보내는 ip주소 포트번호를 NATip address로 바꾸고 새로운 포트를 부여하여 나간다.
들어오는 datagram은 NAT tranlation table을 보고 그 data gram의 목적지에 해당하는 호스토로 전달


이론적으로 NAT은 포트번호가 16bit이므로 60000개정도 쓸수있다.


내부아이피가 외부아이피 호스트로 먼저 요청할 때는 문제없는데...
외부 아이피 호스트가 내부 아이피 호스트로  먼저 요청할 때는.. 문제 발생.. NAT tranlation table에 정보가 없어서....
예로 토렌트는 내부아이피끼리만 알기 때문에....

포트포워딩...등으로 해결..




----------------
IPv6



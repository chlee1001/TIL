per-router control plane
라우터마다 forwarding table이 있음
라우팅 알고리즘에 의해 설정된다.
들어온 패킷의 해더의 목적지 ipaddress와 forwarding table를 매칭시켜서 내보낸다.

control plane에서는 routing algoritm으로 forwarding table구성. 대부분 소프트웨어적으로 구현.
control plane에서의 계산의 결과로 data plane에서 처리..하드웨어적으로 구현.. 빨라야함.. input packet의 목적지 address를 보고 내보내는 것이 data plane의 역할
인풋포트번호와 아웃풋 포트번호가 같을 필요가 업다. 그래서 any to any 연결이 되야함. nanosecond 처리속도를 가짐

Router Input port functions
physical layer - bit 단위 reception (analog signal--> digital signal)

network lay - lookup, forwarding ...찾아내는 것....패킷의 destination ipaddress를 보기 때문에... destination based forwarding
--> match plus action이라고 함....목적지를 찾아서 forwarding을 해주기 때문에..

Datagram forwarding table
table과 비교해서 목적지를 찾고 action.
prefix가 들어가있음...list range of address
prefix는 주소의 범위를 나타냄...같은 subnet의 주소이기때문에...
prefix matching...& longest prefix matching


longest prefix matching을 사용하는 이유///
ISP는 어떤 조직에게 인터넷서비스 공급...
그 조직에 ip address 할당... 어떤 ipaddress block을 줌.. (200.23.16.0/20) 12bit...4096개의 주소를 가짐
그것을 8개의 조직에게 나눠줄려고 함...2^3.. 3bit만 더해주면 됨... 그러면 200.23.16.0/23.......... 각각 9bit 512개의 주소를 가짐..

그 ISP가 8개를 나눠줬다는 것을 상위 인터넷..(그 ISP가 내보내는 곳)이 알아야함... 그래서 forwading table에 prefix 8개를 적어야함..하지만 그 ISP가 8개를 나눠줬기 때문에 굳이 알필요없이 그 상위 인터넷 forwading table에 8개의 prefix가 아닌 그 8개에 해당하는 prefix 1개만 적어주면된다.. ==> address aggregation
그래서 상위 인터넷forwarding table의 entry갯수가 줄어듬.. 그리고 그 ISP는 8개의 prefix정보를 가져야한다.
이 때 만약 그 ISP가 다른 ISP를 사서 관리를 한다면....그리고 원래 그 ISP에서 관리하던 subnet을 그 샀던 ISP에서 관리할려고 보내주면...
그 샀던 ISP에서 상위 인터넷에 연결될때 그 특정 subnet주소도 자신한테 보내달라고 말해야한다.. 그렇기 때문에 상위인터넷 forwarding table에서 원래 ISP랑 삿떤 ISP 둘다매칭되기때문에   prefix longest prefix matching으로 더 자세히 확인하여 그 샀던 ISP에 매칭되어 온다.





Switiching fabrics...
input  output은 anyto any로 연결되어있어야하기 떄문에 switching fabircs를 한다. input buffer에서 output buffer로 내보낼때..
switching fabric 성능에 따라 switching rate...결정됨.. input에서 output으로 얼마나 빨리 나갈수 있나...


memory: input과 output 사이에 memory를 넣어둠... 그래서 input buffer를 메모리에 저장했다가 메모리에서 적절한 output buffer로 복제.. 하지만 두번의 복제때문에 속도가 느림....--> 오래되거나 저가라우터는 메모리방식을 사용..
Bus: input과 output 사이의 bus라는 회선을 두고 그 bus로 input output으로 연결.. bus는 두개가 공유 --> 그래서 어떤 한 포트가 bus를 사용하면 다른 포트에서 사용하지 못함...하나의 포트밖에 사용하지 못함..
Crossbar: 하드웨어 디자인에 굉장히 많이 사용.. input port , output port사이의 여러개의 길을 만든다. 길을 공유하지 않기 때문에 동시에 여러 포트사용할 수 있고 속도도 빠름..

output port로 패킷이 나오면 forwarding table를 들린 것... queueing delay... loss같은 것이 대부분 output port에서 발생..
아웃풋 포트로 나올 때의 링크 속도가 있음.. 만약 내보낼 때 속도보다 switching fabric처리 속도가 빠르면 버퍼에 패킷 쌓임... 꽉차면.. loss발생..
buffering은 arrival rate가 switch 처리속도보다 느리면 발생..

ouput port queueing...
만약 아웃풋 버퍼에 패킷을 3개 저장할 수 있다고 가정... forwarding table를 보고 switch fabric을 통해서 어떤 패킷이 그 꽉찬 버퍼로 가면 loss 발생






------------------------------
4.4 Generalized Forward and SDN

Firewalls
하나의 orgaization 내부네트워크를 그 위에 커다란 인터넷에서 독립시킴...그래서 내부네트워크는 신뢰할 수 있는 네트워크라고 한다. 
만약 라우터를 통해 외부 네트워크로 나가면 신뢰할 수 없음... ==> 외부의 신뢰할 수 없는 것을 막는 것이 firewall
firewall은 라우터에 설치되거나 옆에 설치됨... 패킷을 걸러줌... 만약 서버를 공격하는 패킷이 있으면 firewall에서 그 패킷을 차단한다.. 필터링..
패킷단위로 패킷을 열어보고 문제가 될수 있는 소스를 차단한다. 위험이 되는 포트도 다 차단..
그래서 내부에서 그 포트가 필요하면 관리자에 요청하여.. 열어줌..
firewall은 그래서 network layer에서 ...<<<<<... 포트넘버를 본다면 transport layer...\

middlebox..NAT.. Firewall 등등.
러우터를 포함한 middlebox들은 하드웨어안에 소프트웨어도 같이 일체형으로 돌아감..그래서 관리하기 어려움..
라우터에는 control plane, dateplane이 둘다 있는 per router와 control plane이 따로 있는 centerall..........router가 있다...
 쪼금씩 다르지만 일체형이여서 호환성도 안좋음....하지만 패킷을 열어 특정 action을 하는 점은 다 똑같다...
위의 문제를 해결하기 위해
SDN ... software Defined networking.방식
Basics...
----match longest perfix matching으로 확인으 Action--> action
general하게 match plus action 접근... 헤더의 여러가지 정보중 필요한 특정 정보만 확이하여 forwarding이 아닌 다른 특정 action을 할 수 있다.
ex/ 특정 포트를 확인하고 특정 포트를 block한다(firewall),,,NAT.. 등등을 ACtion에서 함..
==> 표준 OpenFlow 1.0
일반적으로... control plane은 중앙서버에 구현되고 서버에서 알려주고 data plane에서 실행...data plane에서 forwaring뿐만 아니라 여러 기능을 할 수 잇기 때문에
local flow table로 불리는 table이 data plane에 들어간다. 이렇기 때문에 더이상 라우터라 부르지않고 패킷스위치라고 부른다..(라우터 기능말고 NAT기능 등 여러 기능을 가지기 ㅣ 때문에)
flow table에는 header와 action이 있다. 어떤 header와 매칭 시킬지.... 만약 destination forwarding이면 prefix를 찾던가...
예전에는 destination source ip만 봤다면 general forwarding은 다봄...

counter는 이 패킷이 몇번 들어왔는지..match+plus가 몇번 일어났는지....
drop : firewall 기능.. forward는 라우터 기능

규칙을 위해서 각 flow table에...예로... 소스아이피가 10.3.*이고 목적지 아이피가 10.2.*이면 4번으로 가라.. 
2번포트로 들어오고 목적지가 10.2.0.3이면 3번으로 가라...이런식으로 규칙만듬..

destination based forwarding 라우터 기능을 위해서.. ip destination만 확인하고 나머지는 wild card...
firewall은 목적지 포트를 보고 나머지는 wild card..이런식으로 여러기능을 패킷 스위칭에서 구현


control plane의 결정을 보고 destination based forwarding은 forwarding table을... generalized forwarding은 flow tables를...














